@using K9.Base.WebApplication.Helpers
@using K9.SharedLibrary.Helpers
@using K9.WebApplication.Options
@model K9.WebApplication.ViewModels.ArticleDynamicFieldsViewModel

<div class="row">
    <div class="col-sm-12">
        <div class="form-group margin-bottom-0">
            @Html.Partial("../Shared/Controls/_ImageUploader", new ImageUploadOptions
            {
                UploadUrl = Url.Action("UploadImage", new { articleId = Model.ArticleId })
            })
        </div>
        <br />
    </div>
</div>
<div class="row">
    <div class="col-sm-12">
        <div class="form-group">
            <label for="imageList">@Dictionary.Images:</label>
            <small class="text-muted" style="display: block; margin-top: -5px; margin-bottom: 8px;">
                Ctrl+C to copy image element markup. Ctrl+Alt+C to copy image URL.
            </small>
            <div id="imageList" class="image-list">
                @Html.Partial("_ImageListItems")
            </div>
        </div>
    </div>
    <div class="col-sm-12">
        <div class="form-group margin-bottom-0">
            <button type="button" id="deleteSelectedImages" class="btn btn-danger">
                <i class="glyphicon glyphicon-trash"></i> @Dictionary.DeleteSelected
            </button>
        </div>
    </div>
</div>

<script type="text/javascript">

    let selectedImage = null;
    let lastSelectedIndex = -1;

    $('#imageList').on('click', '.image-list-item', function (e) {
        const $item = $(this);
        const $items = $('#imageList .image-list-item');
        const index = $items.index(this);

        if (e.shiftKey && lastSelectedIndex !== -1) {
            // Range selection
            const [start, end] = [lastSelectedIndex, index].sort((a, b) => a - b);
            $items.slice(start, end + 1).addClass('selected');
        } else if (e.ctrlKey || e.metaKey) {
            // Toggle item
            $item.toggleClass('selected');
            lastSelectedIndex = index;
        } else {
            // Replace all selection
            $items.removeClass('selected');
            $item.addClass('selected');
            lastSelectedIndex = index;
        }

        selectedImage = $('#imageList .image-list-item.selected').first().get(0);
    });

    $('#imageList').on('click', '.copy-url', function (e) {
        e.stopPropagation();
        const $item = $(this).closest('.image-list-item');
        const url = $item.data('url');
        if (url) {
            navigator.clipboard.writeText(url)
                .then(() => {
                    $.fn.showTooltip($item, "Image URL copied!");
                })
                .catch(console.error);
        }
    });

    $('#imageList').on('click', '.copy-markup', function (e) {
        e.stopPropagation();
        const $item = $(this).closest('.image-list-item');
        const markup = $item.data('placeholder');
        if (markup) {
            navigator.clipboard.writeText(markup)
                .then(() => {
                    $.fn.showTooltip($item, "Image markup copied!");
                })
                .catch(console.error);
        }
    });

    // 📋 Clipboard support (Ctrl+C / Ctrl+Shift+C)
    $(document).on('keydown', function (e) {
        if (!selectedImage || !e.ctrlKey || e.key.toLowerCase() !== 'c') return;

        const $item = $(selectedImage);
        const text = e.altKey
            ? $item.data('url')
            : $item.data('placeholder');

        if (text) {
            navigator.clipboard.writeText(text).catch(err => console.error("Clipboard error:", err));
        }
    });

    // 🧹 Delete selected images
    $('#deleteSelectedImages').on('click', function () {
        const $btn = $(this);
        const $selected = $('#imageList .image-list-item.selected');
        $('#deleteSelectedImages').text(`Delete Selected (${$selected.length})`);

        if ($selected.length === 0) {
            $.fn.showToast('Please select one or more images to delete.', 'error');
            return;
        }

        if (!$(this).data('confirmed')) {
            $.fn.showToast('Click delete again to confirm.', 'info');
            $(this).data('confirmed', true);
            setTimeout(() => $(this).removeData('confirmed'), 3000);
            return;
        }

        const urlsToDelete = $selected.map(function () {
            return $(this).data('relativepath');
        }).get();

        $btn.prop('disabled', true);
        $.fn.displaySpinner($selected, true);

        $.ajax({
            url: '@Url.Action("DeleteImages")',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ urls: urlsToDelete }),
            success: function (response) {
                if (response.success) {
                    refreshImageOptions(@Model.ArticleId);
                    $.fn.showToast(response.message || 'Image(s) deleted successfully.', 'success');
                } else {
                    $.fn.showToast(response.message || 'Failed to delete some images.', 'error');
                }
            },
            error: function (xhr) {
                $.fn.showToast('A network or server error occurred.', 'error');
                console.error("DeleteImages error:", xhr.responseText);
            },
            complete: function () {
                $btn.prop('disabled', false);
                $.fn.hideSpinner($selected);
            }
        });
    });

    // 🔁 Refresh image list partial
    function refreshImageOptions(articleId) {
        $.get('@Url.Action("GetImageOptions")', { articleId: articleId }, function (data) {
            $('#imageList').html(data);
        });
    }

    // 🔁 When image is uploaded, reload the list
    document.addEventListener('imageUploaded', function () {
        refreshImageOptions(@Model.ArticleId);
    });

</script>