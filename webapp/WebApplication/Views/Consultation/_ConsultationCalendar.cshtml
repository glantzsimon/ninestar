@using System.Globalization
@using K9.SharedLibrary.Helpers
@using K9.WebApplication.Options
@using SessionHelper = K9.WebApplication.Helpers.SessionHelper
@model K9.WebApplication.ViewModels.ScheduleConsultationViewModel

@{
    var abbr = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;
    var ordered = abbr.Skip(1).Concat(abbr.Take(1)).ToArray();
    var mondayIso = Model.Date.ToUniversalTime().ToString("o");

    var isAdmin = SessionHelper.CurrentUserIsAdmin();
}

<div id="calendar">
    <div class="calendar-header-wrapper">
        <div class="calendar-nav">
            <button id="prev-week" class="nav-btn ripple">
                <span class="glyphicon glyphicon-chevron-left"></span>
            </button>
            <button id="next-week" class="nav-btn ripple">
                <span class="glyphicon glyphicon-chevron-right"></span>
            </button>
        </div>

        <div class="calendar-header">
            <div class="time-header"></div>
            <div class="day-headers">
                @for (int i = 0; i < 7; i++)
                {
                    <div class="day-header">
                        <div class="day-name">@ordered[i]</div>
                        <div class="day-date" data-day-index="@i"></div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="calendar-body">
        <div class="time-column">
            @for (int hour = 10; hour < 20; hour++)
            {
                <div class="time-cell">@($"{hour:00}:00")</div>
            }
        </div>

        <div class="day-columns">
            @for (int d = 0; d < 7; d++)
            {
                <div class="day-column" data-day-index="@d">
                    @for (int hour = 10; hour < 20; hour++)
                    {
                        <div class="slot" data-day="@d" data-hour="@hour"></div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<ul id="event-menu" class="event-menu">
    <li data-action="delete"><i class="fa fa-trash"></i> @Dictionary.Delete</li>
</ul>

<script>

$(function () {
    const isAdmin = @(isAdmin.ToString().ToLower());
    const $calendar = $('#calendar'),
        slotHeight = 60,
        halfH      = slotHeight / 2,
        maxH       = slotHeight * 2;

    const $menu = $('#event-menu')
        .css({ position: 'absolute' })
        .appendTo($calendar);

    let deleteConfirmMap = {};

    let currentWeekStartIso = '@mondayIso';

    const $body      = $('#calendar .calendar-body'),
        slotWidth  = 60,
        totalWidth = $body.width() - slotWidth,
        colWidth   = totalWidth / 7;

    function loadSlots(monday) {
        currentWeekStartIso = monday;

        // Update header dates from that Monday
        renderHeaderDates(currentWeekStartIso);

        // Fetch slots for that exact week
        $.fn.displaySpinner($calendar, true);
        $.getJSON('@Url.Action("Calendar")', { date: currentWeekStartIso })
            .done(renderSlots)
            .always(() => $.fn.hideSpinner($calendar));
    }

    $('#prev-week').on('click', function() {
        const d = new Date(currentWeekStartIso);
        d.setDate(d.getDate() - 7);
        loadSlots(d.toISOString());
    });

    $('#next-week').on('click', function() {
        const d = new Date(currentWeekStartIso);
        d.setDate(d.getDate() + 7);
        loadSlots(d.toISOString());
    });

    function renderSlots(slots) {
        $body.find('.event-block').remove();

        slots.forEach(s => {
            const start      = new Date(+s.start.match(/\d+/)[0]),
                end        = new Date(+s.end.match(/\d+/)[0]),
                day        = start.getDay(),
                // get full fractional hours since 10:00
                minutes    = start.getMinutes(),
                hoursSince = (start.getHours() - 10) + (minutes / 60),
                dur        = (end - start) / 3600000,

                leftPx = slotWidth + day * colWidth + 4,
                topPx  = hoursSince * slotHeight,
                hPx    = dur * slotHeight,
                wPx    = colWidth - 8;

            const $slot = $('<div class="event-block">')
                .addClass(s.isTaken ? 'taken' : 'available')
                .attr('data-id', s.id)
                .css({ left: leftPx, top: topPx, width: wPx, height: hPx })
                .text(s.title);

            if (isAdmin) {
                $slot.appendTo($body);
            } else {
                $('<a>')
                    .attr('href', s.confirmUrl)
                    .append($slot)
                    .appendTo($body);
            }
        });

        enableDragging();

        $.fn.hideSpinner($("#calendar"));
    }

    function renderHeaderDates(weekStartIso) {
        // parse your Monday / weekStart
        const start = new Date(weekStartIso);

        $('.day-date').each(function() {
            const idx = parseInt($(this).data('day-index'), 10),
                d   = new Date(start);
            d.setDate(start.getDate() + idx);

            // format e.g. “Apr 12”
            const month = d.toLocaleString('default', { month: 'short' }),
                day   = d.getDate();

            $(this).text(`${month} ${day}`);
        });
    }

    function enableDragging() {
        const container = document.querySelector('#calendar .calendar-body'),
              slotH      = slotHeight,
              halfH      = slotH / 2,
              slotW      = 60,
              totalW     = container.clientWidth - slotW,
              colW       = totalW / 7;

        // remove previous handlers
        container.querySelectorAll('.event-block.available').forEach(el => {
            el.onmousedown = null;
        });

        // attach new drag logic
        container.querySelectorAll('.event-block.available').forEach(el => {
            el.style.cursor = 'grab';
            el.addEventListener('mousedown', function (e) {
                e.preventDefault();
                el.style.cursor = 'grabbing';

                const startX   = e.clientX,
                      startY   = e.clientY,
                      rect     = el.getBoundingClientRect(),
                      bodyRect = container.getBoundingClientRect(),
                      origL    = rect.left - bodyRect.left,
                      origT    = rect.top  - bodyRect.top;

                function onMouseMove(e) {
                    let dx   = e.clientX - startX,
                        dy   = e.clientY - startY,
                        newL = Math.max(slotW, Math.min(origL + dx, slotW + 7 * colW - rect.width - 4)),
                        newT = Math.max(0, Math.min(origT + dy, container.clientHeight - rect.height));
                    el.style.left = newL + 'px';
                    el.style.top  = newT + 'px';
                }

                function onMouseUp() {
                    document.removeEventListener('mousemove', onMouseMove);
                    document.removeEventListener('mouseup',   onMouseUp);
                    el.style.cursor = 'grab';

                    // 1) Vertical snap → units of half-hours
                    const finalT    = parseFloat(el.style.top),
                        hourUnits = Math.floor(finalT / slotH),
                        offset    = finalT - hourUnits * slotH,
                        units     = offset <= slotH * 0.25
                            ? hourUnits * 2
                            : offset <= slotH * 0.75
                            ? hourUnits * 2 + 1
                            : (hourUnits + 1) * 2;

                    // Apply snapped top
                    const snappedT = units * halfH;
                    el.style.top = snappedT + 'px';

                    // 2) Compute dayIndex from left
                    const finalL   = parseFloat(el.style.left),
                        relL     = finalL - slotW - 4,           // remove left margin
                        rawDay   = relL / colW,
                        dayIndex = Math.min(6, Math.max(0, Math.round(rawDay)));

                    // 3) Derive hour/minute
                    const startDecimal = 10 + units * 0.5,
                        hour         = Math.floor(startDecimal),
                        minute       = (units % 2 === 0 ? 0 : 30);

                    // 4) Send full datetime to server
                    updateSlot(
                        el.getAttribute('data-id'),
                        dayIndex,
                        hour,
                        minute
                    );
                }

                document.addEventListener('mousemove', onMouseMove);
                document.addEventListener('mouseup',   onMouseUp);
            });
        });
    }

    function updateSlot(id, dayIndex, hour, minute, duration) {
        const weekStart = new Date(currentWeekStartIso),
              slotDate  = new Date(weekStart);

        slotDate.setDate(slotDate.getDate() + (dayIndex - 1));
        slotDate.setHours(hour, minute, 0, 0);

        const data = {
            id: id,
            startDateTime: slotDate.toISOString()
        };

        $.ajax({
            url: '@Url.Action("UpdateSlot")',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data)
        }).always(function () {
            loadSlots(currentWeekStartIso);
        });
    }

    let isSelecting   = false,
        startSlot,
        $overlay,
        snappedOffset;

    $calendar.on('contextmenu', '.event-block', function(e) {
        e.preventDefault();

        // stash which event we clicked
        $menu.data('eventId', $(this).data('id'));

        // compute x/y *inside* the calendar
        const calOff = $calendar.offset();
        let x = e.pageX - calOff.left,
            y = e.pageY - calOff.top;

        // optional: clamp so it never pokes outside
        x = Math.min(Math.max(0, x), $calendar.innerWidth()  - $menu.outerWidth());
        y = Math.min(Math.max(0, y), $calendar.innerHeight() - $menu.outerHeight());

        $menu.css({ left: x, top: y }).show();
    });

    $body
        .on('mousedown', '.slot', function(e) {
            e.preventDefault();
            isSelecting = true;
            startSlot   = $(this);

            // recalc offsets
            const bodyOff = $body.offset(),
                    slotOff = startSlot.offset(),
                    width   = startSlot.outerWidth() - 8;

            // where inside the cell did they click?
            const clickY = e.pageY - slotOff.top;
            // snap that to 0 or halfH
            snappedOffset = clickY < halfH ? 0 : halfH;

            // place overlay at that snapped start
            $overlay = $('<div class="selection-overlay available">')
                .appendTo($body)
                .css({
                left:   slotOff.left - bodyOff.left + 4,
                top:    slotOff.top  - bodyOff.top  + snappedOffset,
                width:  width,
                height: 0,
                zIndex: 1000
                });
            })

        .on('mousemove', function(e) {
            if (!isSelecting) return;

            const bodyOff    = $body.offset(),
                    // how far below our snapped start did they drag?
                    delta       = e.pageY - (bodyOff.top + parseFloat($overlay.css('top'))),
                    // decide height: 0, slotHeight, or 2*slotHeight
                    newH = delta < halfH
                        ? 0
                        : delta < slotHeight + halfH
                            ? slotHeight
                            : maxH;

            $overlay.css('height', Math.min(newH, maxH));
        });

        $(document).on('mouseup', function() {
          if (!isSelecting) return;
          isSelecting = false;

          const heightPx = parseFloat($overlay.css('height'));
          $overlay.remove();

          // if still zero, abort
          if (heightPx < slotHeight) return;

          const duration = heightPx / slotHeight,       // 1 or 2
                weekStart = new Date(currentWeekStartIso),
                dayIndex  = startSlot.data('day') - 1,
                startHr   = startSlot.data('hour'),
                slotDate  = new Date(weekStart);

          slotDate.setDate(slotDate.getDate() + dayIndex);
          // include your snapped half-hour start
          slotDate.setHours(startHr, snappedOffset ? 30 : 0, 0, 0);

          $.ajax({
            url: '@Url.Action("CreateSlot")',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
              startDateTime: slotDate.toISOString(),
              duration:      duration
            })
          }).always(() => loadSlots(currentWeekStartIso));

        }).on('click', function() {
            $menu.hide();
        });

        window.setTimeout(function() {
            loadSlots(currentWeekStartIso);
        }, 500);

    $menu.on('click', 'li', function(e) {
        e.stopPropagation();
        const action = $(this).data('action'),
            id     = $menu.data('eventId');
        const key = `slot-${id}`;

        if (action === 'delete') {
            if (deleteConfirmMap[key]) {
                delete deleteConfirmMap[key]; // clear flag

                $menu.hide();

                $.ajax({
                    url: '@Url.Action("DeleteSlot")',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ id: id })
                }).done(() => loadSlots(currentWeekStartIso));

            } else {
                deleteConfirmMap[key] = true;

                $.fn.showToast("Click delete again to confirm.", "warning");

                setTimeout(() => {
                        delete deleteConfirmMap[key];
                        $menu.hide();
                    },
                    3000); // auto-expire confirmation after 3 seconds
            }
        } else {
            $menu.hide();
        }
    });

});

</script>