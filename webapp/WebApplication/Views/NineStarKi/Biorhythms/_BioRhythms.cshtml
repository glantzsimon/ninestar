@using ServiceStack.Text
@model K9.WebApplication.Models.BioRhythmsModel

@{
    var id = @Guid.NewGuid().ToString();
}

<div class="gauge-container biorhythms-container">
    <div id="@id" class="sinusgraph" width="896" height="500"></div>
</div>

<script type="text/javascript">

    $(function() {

        function getDataValueDescription(value) {
            if (value < 10) {
                return "Extremely Low";
            }
            if (value < 20) {
                return "Very Low";
            }
            if (value < 40) {
                return "Low";
            }
            if (value <= 60) {
                return "Unpredictable (prone to fluctuations)";
            }
            if (value < 80) {
                return "High";
            }
            if (value < 90) {
                return "Very High";
            }
            if (value <= 100) {
                return "Excellent";
            }
        }

        function getSeriesData(rawData) {
            var data = [], i;
            for (i = 0; i < rawData.length; i += 1) {
                let date = new Date(rawData[i].Item1);
                let value = rawData[i].Item2;
                let selectedDate = new Date("@((Model.SelectedDate ?? DateTime.Today).ToString(K9.WebApplication.Constants.FormatConstants.SessionDateTimeFormat))");

                if (date.getDate() === selectedDate.getDate()) {
                    data.push({
                        marker: {
                            enabled: true,
                            states: {
                                hover: {
                                    enabled: true
                                } ,
                                states: {
                                    select: true
                                }
                            }
                        },
                        x: date,
                        y: value,
                        date: date.toDateString(),
                        description: getDataValueDescription(value)
                    });
                } else {
                    data.push({
                        marker: {
                            lineWidth: 2,
                            enabled: false,
                            states: {
                                hover: {
                                    enabled: true
                                },
                                states: {
                                    select: false
                                }
                            }
                        },
                        x: date,
                        y: value,
                        date: date.toDateString(),
                        description: getDataValueDescription(value)
                    });
                }
            }
            return data;
        }

        function loadCharts() {
            Highcharts.chart("@id",
                {
                    chart: {
                        type: "spline",
                        animation: Highcharts.svg,
                        marginRight: 10
                    },

                    time: {
                        useUTC: false
                    },

                    title: {
                        text: "@Dictionary.NineStarKiBiorhythmsLabel"
                    },

                    plotOptions: {
                        column: {
                            pointPlacement: "between"
                        }
                    },

                    xAxis: {
                        type: "datetime",
                        tickPixelInterval: 32,
                        gridLineWidth: 1,
                        startOnTick: true,
                        endOnTick: true
                    },

                    yAxis: {
                        title: {
                            text: "Value"
                        },
                        plotLines: [
                            {
                                value: 0,
                                width: 1,
                                color: "#808080"
                            }
                        ],
                        max: 100,
                        gridLineWidth: 1
                    },

                    tooltip: {
                        headerFormat: "<strong style='color: {series.color}'>{series.name}</strong><br/><br/>",
                        pointFormat: "<p style='padding: 4px; display: block;'><strong>Date: </strong>{point.date}</p><br/>" +
                                     "<p style='padding: 4px; display: block;'><strong>Value: </strong>{point.y:.2f}</p><br/>" +
                                     "<p style='padding: 4px; display: block;'><strong>Description: </strong>{point.description}</p>",
                        crosshairs: true
                    },

                    legend: {
                        enabled: true
                    },

                    exporting: {
                        enabled: true
                    },

                    series: [
                        {
                            name: "@($"{Model.IntellectualBiorhythmResult.BioRhythm.Name} {Dictionary.Biorhythm}")",
                            data: getSeriesData(@(Html.Raw(Model.IntellectualBiorhythmResult.RangeValues.ToJson())))
                        },
                        {
                            name: "@($"{Model.SpiritualBiorhythmResult.BioRhythm.Name} {Dictionary.Biorhythm}")",
                            data: getSeriesData(@(Html.Raw(Model.SpiritualBiorhythmResult.RangeValues.ToJson())))
                        },
                        {
                            name: "@($"{Model.EmotionalBiorhythmResult.BioRhythm.Name} {Dictionary.Biorhythm}")",
                            data: getSeriesData(@(Html.Raw(Model.EmotionalBiorhythmResult.RangeValues.ToJson())))
                        },
                        {
                            name: "@($"{Model.PhysicalBiorhythmResult.BioRhythm.Name} {Dictionary.Biorhythm}")",
                            data: getSeriesData(@(Html.Raw(Model.PhysicalBiorhythmResult.RangeValues.ToJson())))
                        }
                    ]
                });
        }

        loadCharts();

    });

</script>