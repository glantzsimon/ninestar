@using K9.SharedLibrary.Extensions
@using K9.WebApplication.Config
@model K9.WebApplication.ViewModels.PlannerViewModel

<div class="container main-content clear-both daily-planner-container padding-top-10">
    <div class="calendar-grid">
        <!-- Day headers -->
        <div class="calendar-header">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(DayOfWeek.Monday)</div>
        <div class="calendar-header">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(DayOfWeek.Tuesday)</div>
        <div class="calendar-header">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(DayOfWeek.Wednesday)</div>
        <div class="calendar-header">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(DayOfWeek.Thursday)</div>
        <div class="calendar-header">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(DayOfWeek.Friday)</div>
        <div class="calendar-header">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(DayOfWeek.Saturday)</div>
        <div class="calendar-header">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetDayName(DayOfWeek.Sunday)</div>

        @{
            bool isFirst = true;
            var daysOfWeek = new Dictionary<string, int> {
                { "Monday", 0 }, { "Tuesday", 1 }, { "Wednesday", 2 },
                { "Thursday", 3 }, { "Friday", 4 }, { "Saturday", 5 }, { "Sunday", 6 }
            };
        }

        @foreach (var energy in Model.Energies)
        {
            // Add padding for first row
                if (isFirst)
            {
                int offset = ((int)energy.EnergyStartsOn.DayOfWeek + 6) % 7;
                for (int i = 0; i < offset; i++)
                {
                    <div class="empty-cell"></div>
                }
                isFirst = false;
            }

            <div class="global-planner-item" data-energy="@energy.Energy.Energy" data-view="@Model.ChildView" data-type="child" data-selected-date="@energy.EnergyStartsOn.ToString("yyyy-MM-dd HHHH:mm")" data-update-url="@Model.UpdateChildUrl">
                <div class="calendar-day @energy.SelectedCssClass">
                    <div class="date-label">@Model.GetEnergyTitle(energy)</div>
                    <div class="custom-content">
                        @if (energy.IsSplitEnergy)
                        {
                            <div class="double-energy-container">
                                <img loading="lazy" title="@energy.Energy.EnergyName" alt="@energy.ImageAlt" class="auto-size center-block" src="@energy.ImageSrc" />
                                <span> - </span>
                                <img loading="lazy" title="@energy.SecondEnergy.EnergyName" alt="@energy.SecondImageAlt" class="auto-size center-block" src="@energy.SecondImageSrc" />
                                <span> - </span>
                            </div>
                        }
                        else
                        {
                            <img loading="lazy" title="@energy.Energy.EnergyName" alt="@energy.ImageAlt" class="auto-size center-block" src="@energy.ImageSrc" />
                        }

                    </div>
                </div>
            </div>
        }
    </div>
</div>
