@using K9.WebApplication.Enums
@model K9.WebApplication.Models.NineStarKiModel

<script language="javascript">

    function processUiEvent($el) {
        var view = $el.attr("data-view") || $("#View").val();
        var display = $("#Display").val();
        var selectedDate = $("#SelectedDateTimeString").val();

        var navigationDirection = $el.attr("data-navigation");

        // Update planner
        updateGlobalPlanner(view, display, selectedDate, navigationDirection);
    }

    function bindGlobalPlannerEvents() {
        let clickTimeout;
        let scrollTimeout;

        function clearTimeouts() {
            clearTimeout(clickTimeout);
            clearTimeout(scrollTimeout);
        }

        $("a.planner-zoom-out, a.planner-navigation").click(function(e) {
            e.stopPropagation();
            clearTimeouts();
            processUiEvent($(this));
        });

        $("#View, #Display").change(function(e) {
            e.stopPropagation();
            clearTimeouts();
            processUiEvent($(this));
        });

        // Drill up or down
        $(".global-planner-item").dblclick(function(e) {
            e.stopPropagation();
            clearTimeouts();

            var $el = $(this);
            var view = $el.attr("data-view");
            var display = $el.attr("data-display");
            var selectedDate = $el.attr("data-selected-date");

            // Update planner
            updateGlobalPlanner(view, display, selectedDate);
        });

        $(".global-planner-item").click(function(e) {
            e.stopPropagation();
            var $el = $(this);
            var energy = $el.attr("data-energy");
            var type = $el.attr("data-type");
            var url = $el.attr("data-update-url");
            var $container, $parentBlock, $childBlock, $timeSlot, $details, url;

            $container = $el.closest(".global-planner-container");
            $parentBlock = $el.closest(".parent-block");
            $childBlock = $el.find(".child-block");
            $timeSlot = $el.find(".time-slot");
            $details = $("#global-planner-details");

            // clear current class from all items
            $container.find(".parent-block, .child-block, .time-slot").removeClass("active");

            // set current class on current selected item
            if (type === "parent") {
                $parentBlock.addClass("active");
            }
            else if (type === "child") {
                $childBlock.addClass("active");
            } else if (type === "timeslot") {
                $timeSlot.addClass("active");
            }

            clickTimeout = setTimeout(function() {
                // Display selected child / parent data
                ajaxcontroller().get(url, {energy}).done(
                    function(result) {
                        if (result.success) {
                            $details.find(".panel .panel-heading h4 strong").html(result.data.CycleDescriptiveName);
                            $details.find(".panel .panel-body").html(result.data.CycleDescription);
                        }
                    });

                scrollTimeout = setTimeout(function () {
                    if (!$.fn.isVisible($details))
                        $.fn.scrollToTopOf($details, -180);
                }, 500);

            }, 500);
        });
    }

    function updateGlobalPlanner(view, display, selectedDate, navigationDirection) {
        var url = '@Url.Action("GetPlanner")';

        $.fn.displaySpinner("#global-planner-container");

        ajaxcontroller().getHtml(url,
            {
                dateOfBirth: '@Model.PersonModel.DateOfBirth.ToString("yyyy-MM-dd")',
                birthTimeZoneId: "@Model.PersonModel.BirthTimeZoneId",
                timeOfBirth: '@Model.PersonModel.TimeOfBirth.ToString()',
                gender: '@Model.PersonModel.Gender',
                selectedDateTime: selectedDate,
                displayDataForPeriod: '@Model.DisplayDataForPeriod',
                userTimeZoneId: '@Model.UserTimeZoneId',
                calculationMethod: '@Model.CalculationMethod.ToString()',
                useHolograhpicCycleCalculation: '@Model.UseHolograhpicCycleCalculation.ToString().ToLower()',
                invertDailyAndHourlyKiForSouthernHemisphere: '@Model.InvertDailyAndHourlyKiForSouthernHemisphere.ToString().ToLower()',
                invertDailyAndHourlyCycleKiForSouthernHemisphere: '@Model.InvertDailyAndHourlyCycleKiForSouthernHemisphere.ToString().ToLower()',
                view: view,
                display: display,
                navigationDirection: navigationDirection
            }).done(
            function(result) {
                if (result.success) {
                    let $container = $("#global-planner-container");
                    $container.fadeOut(200, function() {
                        $container.html(result.data);
                        $container.fadeIn(100);

                        bindGlobalPlannerEvents();
                        bootstrapControls().init();
                        ninestarki().initMagicTooltips();

                        var view = $("#PlannerView").val();
                        $("#View").val(view).selectpicker("refresh");

                        var display = $("#PlannerDisplay").val();
                        $("#Display").val(display).selectpicker("refresh");
                    });
                }
            });
    }

    $(function() {

        bindGlobalPlannerEvents();
    });

</script>