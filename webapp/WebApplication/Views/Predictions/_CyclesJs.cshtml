@model K9.WebApplication.Models.NineStarKiModel

<script language="javascript">

    function scrollCurrentYearIntoVew() {
        setTimeout(function () {
            var $cycle = $("div.current-year");
            var $yearlyPlannerContainer = ".yearly-planner-container";

            $($yearlyPlannerContainer).scrollTop($cycle.offset().top - $($yearlyPlannerContainer).offset().top);
        }, 200);
    }

    function scrollCurrentMonthIntoVew() {
        setTimeout(function () {
            var $cycle = $("div.current-month");
            var $monthlyPlannerContainer = ".monthly-planner-container";

            $($monthlyPlannerContainer).scrollTop($cycle.offset().top - $($monthlyPlannerContainer).offset().top);
        }, 200);
    }

    function scrollActivePlannerItemIntoVew() {
        if ($("#PlannerEnableScrollIntoView").val() === 'True') {
        setTimeout(function () {
            var $cycle = $(".year-block .active");
            var $container = $(".global-planner-container");

            $container.scrollTop($cycle.offset().top - $container.offset().top - 154);

            $("#PlannerEnableScrollIntoView").val(false);
        }, 200);
        }
    }

    function scrollCyclesIntoVew(tab) {
        setTimeout(function () {
            $.fn.scrollToTopOf(tab, -230);
        }, 200);
    }

    $(function () {
        $("a[href='#yearly-planner']").click(function () {
            scrollCurrentYearIntoVew();
        });

        $("a[href='#monthly-planner']").click(function () {
            scrollCurrentMonthIntoVew();
        });

        $("#current-yearly-cycle").click(function () {
            scrollCyclesIntoVew("#yearly");

            $(".nav-pills a[href='#predictions']").tab("show");
            $(".nav-pills a[href='#yearly']").tab("show");
        });

        $("#current-monthly-cycle").click(function () {
            scrollCyclesIntoVew("#monthly");

            $(".nav-pills a[href='#predictions']").tab("show");
            $(".nav-pills a[href='#monthly']").tab("show");
        });

        $("a[href='#global-planner']").click(function () {
            scrollActivePlannerItemIntoVew();
        });

        $(".global-planner-item").click(function() {
            var $el = $(this);
            var energy = $el.attr("data-energy");
            var type = $el.attr("data-type");
            var $container, $yearBlock, $monthBlock, $details, url;

            $container = $el.closest(".global-planner-container");
            $yearBlock = $el.closest(".year-block");
            $monthBlock = $el.find(".month-block");
            $details = $("#global-planner-details");

            // clear current class from all items
            $container.find(".year-block, .month-block").removeClass("active");

            // set current class on current selected item
            if (type === "year") {
                $yearBlock.addClass("active");

                url = '@Url.Action("GetYearlyForecast", "Predictions")';
            }
            else if (type === "month") {
                $yearBlock.addClass("active");
                $monthBlock.addClass("active");

                url = '@Url.Action("GetMonthlyForecast", "Predictions")';

                // Fetch daily calendar for month:
                var dailyCalendarUrl = '@Url.Action("GetDailyCalendar", "Predictions")';
                var monthStarsOn = $el.attr("data-month-startson");

                ajaxcontroller().get(dailyCalendarUrl,
                    {
                        dateOfBirth: '@Model.PersonModel.DateOfBirth.ToString("yyyy-MM-dd")',
                        birthTimeZoneId: "@Model.PersonModel.BirthTimeZoneId",
                        timeOfBirth: '@Model.PersonModel.TimeOfBirth.ToString()',
                        gender: '@Model.PersonModel.Gender',
                        selectedDateTime: monthStarsOn,
                        userTimeZoneId: '@Model.UserTimeZoneId',
                        calculationMethod: '@Model.CalculationMethod.ToString()',
                        useHolograhpicCycleCalculation: '@Model.UseHolograhpicCycleCalculation.ToString().ToLower()',
                        invertDailyAndHourlyKiForSouthernHemisphere: '@Model.InvertDailyAndHourlyKiForSouthernHemisphere.ToString().ToLower()',
                        invertDailyAndHourlyCycleKiForSouthernHemisphere: '@Model.InvertDailyAndHourlyCycleKiForSouthernHemisphere.ToString().ToLower()'
                    }).done(
                    function(result) {
                        if (result.success) {
                            $("#daily-planner-container .panel-heading h4").html(result.data.title);
                            $("#daily-planner-container .panel-body").html(result.data.view);
                        }
                    });
            }

            // Display selected month / year data
            ajaxcontroller().get(url, {energy}).done(
                function(result) {
                    if (result.success) {
                        $details.find(".panel .panel-heading h4 strong").html(result.data.CycleDescriptiveName);
                        $details.find(".panel .panel-body").html(result.data.CycleDescription);
                    }
                });

            setTimeout(function () {
                if (!$.fn.isVisible($details))
                    $.fn.scrollToTopOf($details, -180);
            }, 200);
        });

        $(".planner-item").click(function() {
            var $el = $(this);
            var energy = $el.attr("data-energy");
            var type = $el.attr("data-type");
            var $container, $plannerItem, $details;
            var url = "";

            switch (type) {
                case "year":
                    $details = $("#yearly-planner-details");
                    url = '@Url.Action("GetYearlyForecast", "Predictions")';
                    break;

                default:
                    $details = $("#monthly-planner-details");
                    url = '@Url.Action("GetMonthlyForecast", "Predictions")';
                    break;
            }

            $container = $el.closest(".planner-container");
            $plannerItem = $el.find(".planner-item-container");

            // clear current class from all items
            $container.find(".planner-item .planner-item-container").removeClass("active");

            // set current class on current selected item
            $plannerItem.addClass("active");

            ajaxcontroller().get(url, {energy}).done(
                function(result) {
                    if (result.success) {
                        $details.find(".panel .panel-heading h4 strong").html(result.data.CycleDescriptiveName);
                        $details.find(".panel .panel-body").html(result.data.CycleDescription);
                    }
                });
        });
    });

</script>