@using K9.Base.WebApplication.Helpers
@using K9.SharedLibrary.Helpers
@using K9.WebApplication.Enums
@using K9.WebApplication.Options
@model K9.WebApplication.ViewModels.IDynamicFieldsModel

<div class="row">
    <div class="col-sm-12 padding-0 margin-bottom-10">
        <div class="form-group margin-bottom-0">
            <label>@Model.Label</label>
            @Html.Partial("../Shared/Controls/_FileUploader", new UploadOptions
            {
                UploadUrl = Url.Action("UploadFile", "BaseNineStarKi", new { id = Model.EntityId, folderName = Model.FolderName }),
                MaxUploads = Model.MaxUploads,
                UploadCount = Model.EntityImageFields.Length
            })
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12 padding-0">
        <div class="form-group">
            <div id="imageList" class="image-list">
                @Html.Partial("../Shared/Controls/_ImageListItems", Model)
            </div>
            @if (Model.Mode == EDynamicFieldsMode.Advanced)
            {
                <small class="text-muted image-list-instructions">
                    @Dictionary.ImageCopyInstructions
                </small>
            }
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-12">
        <div class="form-group margin-bottom-0">
            <button type="button" id="deleteSelectedImages" class="btn btn-danger">
                <i class="glyphicon glyphicon-trash"></i> @Dictionary.DeleteSelected
            </button>
        </div>
    </div>
</div>

<script type="text/javascript">
    let selectedImage = null;
    let lastSelectedIndex = -1;

    $('#imageList').on('click', '.image-list-item', function (e) {
        const $item = $(this);
        const $items = $('#imageList .image-list-item');
        const index = $items.index(this);

        if (e.shiftKey && lastSelectedIndex !== -1) {
            const [start, end] = [lastSelectedIndex, index].sort((a, b) => a - b);
            $items.slice(start, end + 1).addClass('selected');
        } else if (e.ctrlKey || e.metaKey) {
            $item.toggleClass('selected');
            lastSelectedIndex = index;
        } else {
            $items.removeClass('selected');
            $item.addClass('selected');
            lastSelectedIndex = index;
        }

        selectedImage = $('#imageList .image-list-item.selected').first().get(0);
    });

    $('#imageList').on('click', '.copy-url', function (e) {
        e.stopPropagation();
        const $item = $(this).closest('.image-list-item');
        const url = $item.data('url');
        if (url) {
            copyToClipboard(url, $item, "@Dictionary.ImageUrlCopied");
        }
    });

    $('#imageList').on('click', '.copy-markup', function (e) {
        e.stopPropagation();
        const $item = $(this).closest('.image-list-item');
        const markup = $item.data('placeholder');
        if (markup) {
            copyToClipboard(markup, $item, "@Dictionary.ImageMarkupCopied");
        }
    });

    $('#imageList').on('click', '.select-image', function (e) {
        e.stopPropagation();
        const $item = $(this).closest('.image-list-item');
        const $icon = $(this).find('i');
        const isMulti = e.ctrlKey || e.metaKey;
        const $items = $('#imageList .image-list-item');

        if (!isMulti) {
            $items.removeClass('selected');
            $items.find('.select-image .glyphicon')
                .removeClass('glyphicon-check')
                .addClass('glyphicon-unchecked');
        }

        const isSelected = $item.hasClass('selected');
        $item.toggleClass('selected');

        // Toggle icon class
        if (isSelected) {
            $icon.removeClass('glyphicon-check').addClass('glyphicon-unchecked');
            $.fn.showTooltip($item, "@Dictionary.SelectionCleared");
        } else {
            $icon.removeClass('glyphicon-unchecked').addClass('glyphicon-check');
            $.fn.showTooltip($item, "@Dictionary.ImageSelected");
        }

        selectedImage = $('#imageList .image-list-item.selected').first().get(0);

        const imageInfo = {
            src: $item.data('url'),
            fileName: $item.find('.filename').text()
        };
        document.dispatchEvent(new CustomEvent('imageSelected', { detail: imageInfo }));
    });

    // Clipboard copy fallback
    function copyToClipboard(text, $target, successMsg) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text)
                .then(() => $.fn.showTooltip($target, successMsg))
                .catch(err => {
                    console.error("@Dictionary.ClipboardError:", err);
                    $.fn.showToast("@Dictionary.FailedToCopyToClipboard", "error");
                });
        } else {
            // Fallback
            const $temp = $('<input>');
            $('body').append($temp);
            $temp.val(text).select();
            document.execCommand("copy");
            $temp.remove();
            $.fn.showTooltip($target, successMsg);
        }
    }

    // Ctrl/Ctrl+Alt Clipboard Support
    $(document).on('keydown', function (e) {
        const activeEl = document.activeElement;
        if ($(activeEl).is('input, textarea, [contenteditable="true"]')) return;

        if (!selectedImage || !e.ctrlKey || e.key.toLowerCase() !== 'c') return;

        const $item = $(selectedImage);
        const text = e.altKey ? $item.data('url') : $item.data('placeholder');

        if (text) {
            copyToClipboard(text, $item, "@Dictionary.Copied");
        }

        e.preventDefault();
    });

    $('#deleteSelectedImages').on('click', function () {
        const $btn = $(this);
        const $selected = $('#imageList .image-list-item.selected');

        if ($selected.length === 0) {
            $.fn.showToast('@Dictionary.PleaseSelectOneOrMoreImages', 'error');
            return;
        }

        $btn.text(`@Dictionary.DeleteSelected (${$selected.length})`);

        if (!$btn.data('confirmed')) {
            $.fn.showToast('@Dictionary.DeleteConfirm', 'info');
            $btn.data('confirmed', true);
            setTimeout(() => $btn.removeData('confirmed'), 3000);
            return;
        }

        const urlsToDelete = $selected.map(function () {
            return $(this).data('relativepath');
        }).get();

        $btn.prop('disabled', true);
        $.fn.displaySpinner($selected, true);

        $.ajax({
            url: '@Url.Action("DeleteImages", "BaseNineStarKi")',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ urls: urlsToDelete }),
            success: function (response) {
                if (response.success) {
                    refreshImageOptions(@Model.EntityId);

                    document.dispatchEvent(new CustomEvent('fileDeleted', {
                        detail: {
                            count: urlsToDelete.length
                        }
                    }));

                    $.fn.showToast(response.message || '@Dictionary.ImagesDeletedSuccess', 'success');
                } else {
                    $.fn.showToast(response.message || '@Dictionary.FailedToDeleteSomeImages', 'error');
                }
            },
            error: function (xhr) {
                $.fn.showToast('@Dictionary.NetworkError', 'error');
                console.error("DeleteImages error:", xhr.responseText);
            },
            complete: function () {
                $btn.prop('disabled', false);
                $.fn.hideSpinner($selected);
            }
        });
    });

    function refreshImageOptions(id) {
        // Save currently selected relative paths
        const selectedPaths = $('#imageList .image-list-item.selected').map(function () {
            return $(this).data('relativepath');
        }).get();

        $.get('@Url.Action("GetImageOptions", "BaseNineStarKi")', {
            typeName: "@(Model.EntityType?.Name ?? "")",
            id: id
        }, function (data) {
            $('#imageList').html(data);

            // Re-select matching items
            $('#imageList .image-list-item').each(function () {
                const $item = $(this);
                if (selectedPaths.includes($item.data('relativepath'))) {
                    $item.addClass('selected');
                }
            });
        });
    }

    document.addEventListener('fileUploaded', function () {
        refreshImageOptions(@Model.EntityId);
    });

</script>